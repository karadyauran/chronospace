// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: services.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
    name,
    description,
    price
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, price
`

type CreateServiceParams struct {
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, createService, arg.Name, arg.Description, arg.Price)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteService, id)
	return err
}

const getService = `-- name: GetService :one
SELECT id, name, description, price FROM services
WHERE id = $1
`

func (q *Queries) GetService(ctx context.Context, id pgtype.UUID) (Service, error) {
	row := q.db.QueryRow(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT id, name, description, price FROM services
ORDER BY name
`

func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.Query(ctx, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET name = $2,
    description = $3,
    price = $4
WHERE id = $1
RETURNING id, name, description, price
`

type UpdateServiceParams struct {
	ID          pgtype.UUID    `json:"id"`
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, updateService,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}
