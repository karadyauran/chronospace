// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUserTokens = `-- name: CountUserTokens :one
SELECT COUNT(*) FROM user_tokens
WHERE user_id = $1
`

func (q *Queries) CountUserTokens(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserTokens, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO user_tokens (
    user_id,
    refresh_token,
    refresh_token_expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, refresh_token, refresh_token_expires_at, created_at
`

type CreateUserTokenParams struct {
	UserID                pgtype.UUID      `json:"user_id"`
	RefreshToken          string           `json:"refresh_token"`
	RefreshTokenExpiresAt pgtype.Timestamp `json:"refresh_token_expires_at"`
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, createUserToken, arg.UserID, arg.RefreshToken, arg.RefreshTokenExpiresAt)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM user_tokens
WHERE refresh_token_expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const deleteUserToken = `-- name: DeleteUserToken :exec
DELETE FROM user_tokens
WHERE id = $1
`

func (q *Queries) DeleteUserToken(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserToken, id)
	return err
}

const deleteUserTokensByUserID = `-- name: DeleteUserTokensByUserID :exec
DELETE FROM user_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteUserTokensByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserTokensByUserID, userID)
	return err
}

const getUserTokenByID = `-- name: GetUserTokenByID :one
SELECT id, user_id, refresh_token, refresh_token_expires_at, created_at FROM user_tokens
WHERE id = $1
`

func (q *Queries) GetUserTokenByID(ctx context.Context, id pgtype.UUID) (UserToken, error) {
	row := q.db.QueryRow(ctx, getUserTokenByID, id)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserTokenByRefreshToken = `-- name: GetUserTokenByRefreshToken :one
SELECT id, user_id, refresh_token, refresh_token_expires_at, created_at FROM user_tokens
WHERE refresh_token = $1
`

func (q *Queries) GetUserTokenByRefreshToken(ctx context.Context, refreshToken string) (UserToken, error) {
	row := q.db.QueryRow(ctx, getUserTokenByRefreshToken, refreshToken)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserTokensByUserID = `-- name: GetUserTokensByUserID :many
SELECT id, user_id, refresh_token, refresh_token_expires_at, created_at FROM user_tokens
WHERE user_id = $1
`

func (q *Queries) GetUserTokensByUserID(ctx context.Context, userID pgtype.UUID) ([]UserToken, error) {
	rows, err := q.db.Query(ctx, getUserTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserToken{}
	for rows.Next() {
		var i UserToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.RefreshTokenExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserToken = `-- name: UpdateUserToken :one
UPDATE user_tokens
SET 
    refresh_token = $2,
    refresh_token_expires_at = $3
WHERE id = $1
RETURNING id, user_id, refresh_token, refresh_token_expires_at, created_at
`

type UpdateUserTokenParams struct {
	ID                    pgtype.UUID      `json:"id"`
	RefreshToken          string           `json:"refresh_token"`
	RefreshTokenExpiresAt pgtype.Timestamp `json:"refresh_token_expires_at"`
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, updateUserToken, arg.ID, arg.RefreshToken, arg.RefreshTokenExpiresAt)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
