// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
    user_id,
    service_id,
    date,
    time,
    status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, service_id, date, time, status
`

type CreateBookingParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	ServiceID pgtype.UUID `json:"service_id"`
	Date      pgtype.Date `json:"date"`
	Time      pgtype.Time `json:"time"`
	Status    string      `json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.UserID,
		arg.ServiceID,
		arg.Date,
		arg.Time,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceID,
		&i.Date,
		&i.Time,
		&i.Status,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings
WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBooking, id)
	return err
}

const getBooking = `-- name: GetBooking :one
SELECT id, user_id, service_id, date, time, status FROM bookings
WHERE id = $1
`

func (q *Queries) GetBooking(ctx context.Context, id pgtype.UUID) (Booking, error) {
	row := q.db.QueryRow(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceID,
		&i.Date,
		&i.Time,
		&i.Status,
	)
	return i, err
}

const listBookings = `-- name: ListBookings :many
SELECT id, user_id, service_id, date, time, status FROM bookings
ORDER BY date, time
`

func (q *Queries) ListBookings(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ServiceID,
			&i.Date,
			&i.Time,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookingsByUser = `-- name: ListBookingsByUser :many
SELECT id, user_id, service_id, date, time, status FROM bookings
WHERE user_id = $1
ORDER BY date, time
`

func (q *Queries) ListBookingsByUser(ctx context.Context, userID pgtype.UUID) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookingsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ServiceID,
			&i.Date,
			&i.Time,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings
SET 
    date = $2,
    time = $3,
    status = $4
WHERE id = $1
RETURNING id, user_id, service_id, date, time, status
`

type UpdateBookingParams struct {
	ID     pgtype.UUID `json:"id"`
	Date   pgtype.Date `json:"date"`
	Time   pgtype.Time `json:"time"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, updateBooking,
		arg.ID,
		arg.Date,
		arg.Time,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceID,
		&i.Date,
		&i.Time,
		&i.Status,
	)
	return i, err
}
