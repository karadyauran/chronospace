// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schedules.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
    service_id,
    date,
    time_start,
    time_end,
    status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, service_id, date, time_start, time_end, status
`

type CreateScheduleParams struct {
	ServiceID pgtype.UUID `json:"service_id"`
	Date      pgtype.Date `json:"date"`
	TimeStart pgtype.Time `json:"time_start"`
	TimeEnd   pgtype.Time `json:"time_end"`
	Status    string      `json:"status"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule,
		arg.ServiceID,
		arg.Date,
		arg.TimeStart,
		arg.TimeEnd,
		arg.Status,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.Date,
		&i.TimeStart,
		&i.TimeEnd,
		&i.Status,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSchedule, id)
	return err
}

const getScheduleByID = `-- name: GetScheduleByID :one
SELECT id, service_id, date, time_start, time_end, status FROM schedules
WHERE id = $1
`

func (q *Queries) GetScheduleByID(ctx context.Context, id pgtype.UUID) (Schedule, error) {
	row := q.db.QueryRow(ctx, getScheduleByID, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.Date,
		&i.TimeStart,
		&i.TimeEnd,
		&i.Status,
	)
	return i, err
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, service_id, date, time_start, time_end, status FROM schedules
ORDER BY date, time_start
`

func (q *Queries) ListSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, listSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.Date,
			&i.TimeStart,
			&i.TimeEnd,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedulesByService = `-- name: ListSchedulesByService :many
SELECT id, service_id, date, time_start, time_end, status FROM schedules
WHERE service_id = $1
ORDER BY date, time_start
`

func (q *Queries) ListSchedulesByService(ctx context.Context, serviceID pgtype.UUID) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, listSchedulesByService, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.Date,
			&i.TimeStart,
			&i.TimeEnd,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedules
SET 
    service_id = COALESCE($2, service_id),
    date = COALESCE($3, date),
    time_start = COALESCE($4, time_start),
    time_end = COALESCE($5, time_end),
    status = COALESCE($6, status)
WHERE id = $1
RETURNING id, service_id, date, time_start, time_end, status
`

type UpdateScheduleParams struct {
	ID        pgtype.UUID `json:"id"`
	ServiceID pgtype.UUID `json:"service_id"`
	Date      pgtype.Date `json:"date"`
	TimeStart pgtype.Time `json:"time_start"`
	TimeEnd   pgtype.Time `json:"time_end"`
	Status    string      `json:"status"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, updateSchedule,
		arg.ID,
		arg.ServiceID,
		arg.Date,
		arg.TimeStart,
		arg.TimeEnd,
		arg.Status,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.Date,
		&i.TimeStart,
		&i.TimeEnd,
		&i.Status,
	)
	return i, err
}
