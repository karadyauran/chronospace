basePath: /
definitions:
  models.CreateUserParams:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.UpdateUserParams:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserCreatedResponse:
    properties:
      message:
        type: string
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@chronospace.com
    name: API Support
    url: http://www.chronospace.com/support
  description: This is the backend server for the Chronospace application.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Chronospace API
  version: "1.0"
paths:
  /v1/api/users:
    get:
      description: Get a list of users with pagination
      parameters:
      - description: Limit number of users
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
  /v1/api/users/{id}:
    delete:
      description: Delete user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /v1/api/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - users
  /v1/api/users/logout:
    post:
      description: Logout user and invalidate their token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - users
  /v1/api/users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserCreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register new user
      tags:
      - users
swagger: "2.0"
